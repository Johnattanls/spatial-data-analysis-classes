pacotes <- c("rgdal","plotly","tidyverse","knitr","kableExtra","gridExtra",
"png","grid","magick","rgl","devtools","GISTools","rayshader",
"tmap","broom")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
3
# Carregando um shapefile da Região Centro-Oeste brasileira
shp_centro_oeste <- readOGR(dsn = "shapefile_centrooeste",
layer = "centrooeste_shapefile")
# Explorando a base de dados do shapefile shp_centro_oeste:
shp_centro_oeste@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Explorando a base de dados do shapefile shp_centro_oeste:
shp_centro_oeste@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Explorando a base de dados do shapefile shp_centro_oeste:
shp_centro_oeste@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Notaram os erros de enconding? Para corrigi-los, uma opção pode ser recarregar
# o shapefile com um tipo de encoding que suporte os caracteres utilizados:
shp_centro_oeste <- readOGR(dsn = "shapefile_centrooeste",
layer = "centrooeste_shapefile",
encoding = "UTF8")
# Explorando a base de dados do shapefile shp_centro_oeste recarregado:
shp_centro_oeste@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Visualizando o shapefile de forma espacial:
tm_shape(shp = shp_centro_oeste) +
tm_borders()
# Para quem não sabe onde fica a Região Centro-Oeste brasileira:
tmap_mode("view")
tm_shape(shp = shp_centro_oeste) +
tm_borders()
tmap_mode("plot")
# Passo 1: Transformando nosso shapefile num data frame:
shp_centro_oeste_df <- tidy(shp_centro_oeste, region = "CD_GEOCODM") %>%
rename(CD_GEOCODM = id) %>%
mutate(state = substr(x = group, start = 1, stop = 2),
state = factor(state,
levels = c("50", "51", "52", "53"),
labels = c("MS", "MT", "GO", "DF")),
city_cod = substr(x = group, start = 1, stop = 7)) %>%
left_join(shp_centro_oeste@data,
by = "CD_GEOCODM") %>%
rename(city = NM_MUNICIP)
view(shp_centro_oeste_df)
view(shp_centro_oeste_df)
view(shp_centro_oeste_df)
help("substr")
substr("abcdef",2,4)
help("mutate")
help("dplyr::mutate")
help(dplyr::"mutate")
help("ddplyr::mutate")
help("dddplyr::mutate")
help("ppdplyr::mutate")
help("mutate")
help("factor")
# Passo 1: Transformando nosso shapefile num data frame:
shp_centro_oeste_df <- tidy(shp_centro_oeste, region = "CD_GEOCODM") %>%
rename(CD_GEOCODM = id) %>%
mutate(state = substr(x = group, start = 1, stop = 2),
state = factor(state,
levels = c("50", "51", "52", "53"),
labels = c("MS", "MT", "GO", "DF")),
city_cod = substr(x = group, start = 1, stop = 7)) %>%
left_join(shp_centro_oeste@data,
by = "CD_GEOCODM") %>%
rename(city = NM_MUNICIP)
# Passo 2: Fazendo a plotagem de forma espacial e interativa:
ggplotly(
shp_centro_oeste_df %>%
ggplot() +
geom_polygon(aes(x = long,
y = lat,
group = group,
fill = state,
label = city),
color = "black") +
labs(x = "Longitude",
y = "Latitude",
fill = "State") +
scale_fill_viridis_d(option = "viridis") +
theme_bw()
)
view(shp_centro_oeste_df)
# Passo 1: Criando uma variável que identifique as capitais no objeto
# shp_centro_oeste_df:
shp_centro_oeste_df %>%
mutate(capital = ifelse(city %in% c("CAMPO GRANDE", "CUIABÁ",
"GOIÂNIA", "BRASÍLIA"),
yes = TRUE,
no = FALSE)) -> shp_centro_oeste_df
view(shp_centro_oeste_df)
# Passo 2: Fazendo a plotagem de forma espacial e interativa:
ggplotly(
shp_centro_oeste_df %>%
ggplot() +
geom_polygon(aes(x = long,
y = lat,
group = group,
fill = capital,
label = city),
color = "black") +
labs(x = "Longitude",
y = "Latitude",
fill = "Capital?") +
scale_fill_viridis_d(option = "plasma") +
facet_wrap(~state) +
theme_bw()
)
# Passo 2: Fazendo a plotagem de forma espacial e interativa:
ggplotly(
shp_centro_oeste_df %>%
ggplot() +
geom_polygon(aes(x = long,
y = lat,
group = group,
fill = capital,
label = city),
color = "black") +
labs(x = "Longitude",
y = "Latitude",
fill = "Capital?") +
scale_fill_viridis_d(option = "plasma") +
facet_wrap(~state) +
theme_bw()
)
# Adicionando informações sobre a pobreza da Região Centro-Oeste:
load("dados_centro_oeste.RData")
shp_centro_oeste_dados <- merge(x = shp_centro_oeste,
y = dados_centro_oeste,
by.x = "CD_GEOCODM",
by.y = "CD_GEOCODM")
# Plotando espacialmente a variável de interesse:
tm_shape(shp = shp_centro_oeste_dados) +
tm_fill(col = "poverty",
style = "quantile",
n = 4,
palette = "viridis",
legend.hist = TRUE) +
tm_borders(alpha = 0.8) +
tm_compass() +
tm_layout(legend.outside = TRUE)
# Para uma aproximação da plotagem feita anteriormente com o pacote ggplot2:
shp_centro_oeste_df <- tidy(shp_centro_oeste_dados, region = "CD_GEOCODM") %>%
rename(CD_GEOCODM = id) %>%
left_join(shp_centro_oeste_dados@data, by = "CD_GEOCODM")
# a) Esquema de cores padrão, viridis:
shp_centro_oeste_df %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group, fill = poverty),
color = "black") +
labs(x = "Longitude",
y = "Latitude",
fill = "Poverty") +
scale_fill_viridis_c(option = "viridis") +
theme_bw()
# Se a intenção é a cópia perfeita do mapa da linha 133, mas com a biblioteca
# ggplot2, então temos que replicar as faixas estabelecidas pelo tmap:
shp_centro_oeste_df <- shp_centro_oeste_df %>%
mutate(poverty_bands = ifelse(test = poverty <= 25.40,
yes = "7.84 to 25.40",
no = ifelse(test = poverty > 25.40 & poverty <= 31.80,
yes = "25.41 to 31.80",
no = ifelse(test = poverty > 31.80 & poverty <= 39.88,
yes = "31.81 to 39.88",
no = "39.89 to 72.04"))),
poverty_bands = factor(poverty_bands,
levels = c("7.84 to 25.40",
"25.41 to 31.80",
"31.81 to 39.88",
"39.89 to 72.04")))
